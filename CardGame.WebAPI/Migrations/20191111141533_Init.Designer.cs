// <auto-generated />
using System;
using CardGame.WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CardGame.WebAPI.Migrations
{
    [DbContext(typeof(CardGameContext))]
    [Migration("20191111141533_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CardGame.Lib.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cards");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 55, DateTimeKind.Local).AddTicks(6761),
                            Description = "This is a weak card.",
                            IsDeleted = false,
                            Name = "WeakCard1"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 55, DateTimeKind.Local).AddTicks(6891),
                            Description = "This is also a weak card.",
                            IsDeleted = false,
                            Name = "WeakCard2"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 55, DateTimeKind.Local).AddTicks(6983),
                            Description = "This is a strong card.",
                            IsDeleted = false,
                            Name = "StrongCard1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 55, DateTimeKind.Local).AddTicks(7111),
                            Description = "This is also a strong card.",
                            IsDeleted = false,
                            Name = "StrongCard2"
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Decks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "WeakMonsterDeck"
                        },
                        new
                        {
                            Id = 2,
                            Name = "StrongMonsterDeck"
                        },
                        new
                        {
                            Id = 3,
                            Name = "UserDeck1",
                            UserId = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "UserDeck2",
                            UserId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "UserDeck3",
                            UserId = 2
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.DeckCards", b =>
                {
                    b.Property<int>("DeckId");

                    b.Property<int>("CardId");

                    b.Property<int>("AmountOfCopies");

                    b.HasKey("DeckId", "CardId");

                    b.HasIndex("CardId");

                    b.ToTable("DeckCards");

                    b.HasData(
                        new
                        {
                            DeckId = 1,
                            CardId = 1,
                            AmountOfCopies = 3
                        },
                        new
                        {
                            DeckId = 1,
                            CardId = 2,
                            AmountOfCopies = 3
                        },
                        new
                        {
                            DeckId = 2,
                            CardId = 3,
                            AmountOfCopies = 3
                        },
                        new
                        {
                            DeckId = 2,
                            CardId = 4,
                            AmountOfCopies = 3
                        },
                        new
                        {
                            DeckId = 3,
                            CardId = 1,
                            AmountOfCopies = 2
                        },
                        new
                        {
                            DeckId = 3,
                            CardId = 4,
                            AmountOfCopies = 1
                        },
                        new
                        {
                            DeckId = 4,
                            CardId = 2,
                            AmountOfCopies = 3
                        },
                        new
                        {
                            DeckId = 4,
                            CardId = 3,
                            AmountOfCopies = 2
                        },
                        new
                        {
                            DeckId = 5,
                            CardId = 4,
                            AmountOfCopies = 1
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CardId");

                    b.Property<decimal>("Chance");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("Power");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Effects");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CardId = 1,
                            Chance = 0.5m,
                            Code = "WeakEffect1",
                            Power = 1
                        },
                        new
                        {
                            Id = 2,
                            CardId = 2,
                            Chance = 1m,
                            Code = "WeakEffect2",
                            Power = 0
                        },
                        new
                        {
                            Id = 3,
                            CardId = 3,
                            Chance = 1m,
                            Code = "StrongEffect1",
                            Power = 20
                        },
                        new
                        {
                            Id = 4,
                            CardId = 4,
                            Chance = 0.8m,
                            Code = "StrongEffect2",
                            Power = 30
                        },
                        new
                        {
                            Id = 5,
                            CardId = 4,
                            Chance = 1m,
                            Code = "StrongEffect3",
                            Power = 0
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DeckId");

                    b.Property<int>("Health");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("DeckId");

                    b.ToTable("Monsters");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeckId = 1,
                            Health = 10,
                            Name = "WeakMonster"
                        },
                        new
                        {
                            Id = 2,
                            DeckId = 2,
                            Health = 2000,
                            Name = "StrongMonster"
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CreatedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email");

                    b.Property<bool>("IsAdmin");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("Name");

                    b.Property<string>("Password");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 56, DateTimeKind.Local).AddTicks(7721),
                            Email = "regularuser@example.test",
                            IsAdmin = false,
                            IsDeleted = false,
                            Name = "RegularUser",
                            Password = "password"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDateTime = new DateTime(2019, 11, 11, 15, 15, 34, 56, DateTimeKind.Local).AddTicks(7829),
                            Email = "admin@example.test",
                            IsAdmin = true,
                            IsDeleted = false,
                            Name = "Admin",
                            Password = "password"
                        });
                });

            modelBuilder.Entity("CardGame.Lib.Models.Deck", b =>
                {
                    b.HasOne("CardGame.Lib.Models.User", "User")
                        .WithMany("Decks")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CardGame.Lib.Models.DeckCards", b =>
                {
                    b.HasOne("CardGame.Lib.Models.Card", "Card")
                        .WithMany("DeckCards")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CardGame.Lib.Models.Deck", "Deck")
                        .WithMany("DeckCards")
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CardGame.Lib.Models.Effect", b =>
                {
                    b.HasOne("CardGame.Lib.Models.Card", "Card")
                        .WithMany("Effects")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CardGame.Lib.Models.Monster", b =>
                {
                    b.HasOne("CardGame.Lib.Models.Deck", "Deck")
                        .WithMany()
                        .HasForeignKey("DeckId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
